/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from 'angular2-grid/directives/NgGridItem';
import * as import1 from '@angular/core/src/change_detection/change_detection_util';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
export class Wrapper_NgGridItem {
  /*private*/ _eventHandler:Function;
  context:import0.NgGridItem;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  subscription0:any;
  subscription1:any;
  subscription2:any;
  subscription3:any;
  subscription4:any;
  subscription5:any;
  subscription6:any;
  subscription7:any;
  subscription8:any;
  subscription9:any;
  subscription10:any;
  subscription11:any;
  subscription12:any;
  subscription13:any;
  constructor(p0:any,p1:any,p2:any,p3:any,p4:any) {
    this._changed = false;
    this.context = new import0.NgGridItem(p0,p1,p2,p3,p4);
    this._expr_0 = import1.UNINITIALIZED;
  }
  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    this.context.ngOnDestroy();
    (this.subscription0 && this.subscription0.unsubscribe());
    (this.subscription1 && this.subscription1.unsubscribe());
    (this.subscription2 && this.subscription2.unsubscribe());
    (this.subscription3 && this.subscription3.unsubscribe());
    (this.subscription4 && this.subscription4.unsubscribe());
    (this.subscription5 && this.subscription5.unsubscribe());
    (this.subscription6 && this.subscription6.unsubscribe());
    (this.subscription7 && this.subscription7.unsubscribe());
    (this.subscription8 && this.subscription8.unsubscribe());
    (this.subscription9 && this.subscription9.unsubscribe());
    (this.subscription10 && this.subscription10.unsubscribe());
    (this.subscription11 && this.subscription11.unsubscribe());
    (this.subscription12 && this.subscription12.unsubscribe());
    (this.subscription13 && this.subscription13.unsubscribe());
  }
  check_config(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.config = currValue;
      this._expr_0 = currValue;
    }
  }
  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    if (!throwOnChange) {
      if ((view.numberOfChecks === 0)) { this.context.ngOnInit(); }
      this.context.ngDoCheck();
    }
    return changed;
  }
  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import2.AppView<any>,_eventHandler:any,emit0:boolean,emit1:boolean,emit2:boolean,emit3:boolean,emit4:boolean,emit5:boolean,emit6:boolean,emit7:boolean,emit8:boolean,emit9:boolean,emit10:boolean,emit11:boolean,emit12:boolean,emit13:boolean):void {
    this._eventHandler = _eventHandler;
    if (emit0) { (this.subscription0 = this.context.onItemChange.subscribe(_eventHandler.bind(view,'onItemChange'))); }
    if (emit1) { (this.subscription1 = this.context.onDragStart.subscribe(_eventHandler.bind(view,'onDragStart'))); }
    if (emit2) { (this.subscription2 = this.context.onDrag.subscribe(_eventHandler.bind(view,'onDrag'))); }
    if (emit3) { (this.subscription3 = this.context.onDragStop.subscribe(_eventHandler.bind(view,'onDragStop'))); }
    if (emit4) { (this.subscription4 = this.context.onDragAny.subscribe(_eventHandler.bind(view,'onDragAny'))); }
    if (emit5) { (this.subscription5 = this.context.onResizeStart.subscribe(_eventHandler.bind(view,'onResizeStart'))); }
    if (emit6) { (this.subscription6 = this.context.onResize.subscribe(_eventHandler.bind(view,'onResize'))); }
    if (emit7) { (this.subscription7 = this.context.onResizeStop.subscribe(_eventHandler.bind(view,'onResizeStop'))); }
    if (emit8) { (this.subscription8 = this.context.onResizeAny.subscribe(_eventHandler.bind(view,'onResizeAny'))); }
    if (emit9) { (this.subscription9 = this.context.onChangeStart.subscribe(_eventHandler.bind(view,'onChangeStart'))); }
    if (emit10) { (this.subscription10 = this.context.onChange.subscribe(_eventHandler.bind(view,'onChange'))); }
    if (emit11) { (this.subscription11 = this.context.onChangeStop.subscribe(_eventHandler.bind(view,'onChangeStop'))); }
    if (emit12) { (this.subscription12 = this.context.onChangeAny.subscribe(_eventHandler.bind(view,'onChangeAny'))); }
    if (emit13) { (this.subscription13 = this.context.ngGridItemChange.subscribe(_eventHandler.bind(view,'ngGridItemChange'))); }
  }
}